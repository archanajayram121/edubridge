#Algorithm:
1. Initialize a counter to store the number of palindromic substrings.
2. Iterate through the string using two nested loops to generate all possible substrings.
3. For each substring, check if it is a palindrome by comparing characters from the start and end of the substring.
4. If the substring is a palindrome, increment the counter.

#Pseudocode:
function CountPalindromicSubstrings(str)
  count = 0
  For i = 0 to length(str) - 1
    For j = i to length(str) - 1
      substr = str[i..j]
      If IsPalindrome(substr)
        count = count + 1
  Return count

function IsPalindrome(str)
  start = 0
  end = length(str) - 1
  While start < end
    If str[start] != str[end]
      Return False
    start = start + 1
    end = end - 1
  Return True
End function

#C Program:
#include <stdio.h>
#include <string.h>

int isPalindrome(char *str) {
  int start = 0;
  int end = strlen(str) - 1;

  while (start < end) {
    if (str[start] != str[end]) {
      return 0;
    }
    start++;
    end--;
  }

  return 1;
}

int countPalindromicSubstrings(char *str) {
  int count = 0;
  int len = strlen(str);

  for (int i = 0; i < len; i++) {
    for (int j = i; j < len; j++) {
      char substr[j - i + 1];
      strncpy(substr, str + i, j - i + 1);
      substr[j - i + 1] = '\0';

      if (isPalindrome(substr)) {
        count++;
      }
    }
  }

return count;
}

int main() {
  char str[100];

  printf("Enter a string: ");
  scanf("%s", str);

  int count = countPalindromicSubstrings(str);

  printf("Number of palindromic substrings: %d\n", count);

  return 0;
}
