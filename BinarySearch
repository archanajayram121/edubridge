#Algorithm
1.Start with a sorted array of elements.
2. Find the middle index of the array.
3. Compare the target element with the middle element.
4. If the target element is equal to the middle element, return the middle index.
5. If the target element is less than the middle element, repeat steps 2-4 with the left half of the array.
6. If the target element is greater than the middle element, repeat steps 2-4 with the right half of the array.
7. If the target element is not found, return -1.

#pseudoCode
function BinarySearch(arr, target)
  low = 0
  high = length(arr) - 1

  While low <= high
    mid = (low + high) / 2
    If arr[mid] == target
      Return mid
    Else If arr[mid] < target
      low = mid + 1
    Else
      high = mid - 1

  Return -1
End function

#c program
#include <stdio.h>

int binarySearch(int arr[], int target, int size) {
  int low = 0;
  int high = size - 1;

  while (low <= high) {
    int mid = (low + high) / 2;
    if (arr[mid] == target) {
      return mid;
    } else if (arr[mid] < target) {
      low = mid + 1;
    } else {
      high = mid - 1;
    }
  }

  return -1;
}

int main() {
  int arr[] = {2, 5, 8, 12, 16, 23, 38, 56, 72, 91};
  int target = 23;
  int size = sizeof(arr) / sizeof(arr[0]);

  int result = binarySearch(arr, target, size);

  if (result == -1) {
    printf("Element not found in the array\n");
  } else {
    printf("Element found at index %d\n", result);
  }

  return 0;
}


