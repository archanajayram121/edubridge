#Algorithm
1. Take two strings as input.
2. Sort both strings.
3. Compare the sorted strings.
4. If the sorted strings are equal, the original strings are anagrams.

#Pseudocode
function AnagramCheck(str1, str2)
  sortedStr1 = Sort(str1)
  sortedStr2 = Sort(str2)

  If sortedStr1 == sortedStr2
    Return True
  Else
    Return False
End function

#c program
#include <stdio.h>
#include <string.h>

// Function to swap two characters
void swap(char *a, char *b) {
  char temp = *a;
  *a = *b;
  *b = temp;
}

// Function to sort a string
void sortString(char *str) {
  int len = strlen(str);
  for (int i = 0; i < len - 1; i++) {
    for (int j = i + 1; j < len; j++) {
      if (str[i] > str[j]) {
        swap(&str[i], &str[j]);
      }
    }
  }
}

// Function to check if two strings are anagrams
int anagramCheck(char *str1, char *str2) {
  sortString(str1);
  sortString(str2);

  if (strcmp(str1, str2) == 0) {
    return 1;
  } else {
    return 0;
  }
}

int main() {
  char str1[100], str2[100];

  printf("Enter first string: ");
  scanf("%s", str1);

  printf("Enter second string: ");
  scanf("%s", str2);

  if (anagramCheck(str1, str2)) {
    printf("The strings are anagrams.\n");
  } else {
    printf("The strings are not anagrams.\n");
  }

  return 0;
}
